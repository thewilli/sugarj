module jasmin/lexical/JasminXT-Names
imports jasmin/lexical/JasminXT-Numbers jasmin/lexical/JasminXT-Descriptors

exports
  lexical syntax
    [A-Za-z] [A-Za-z0-9]*  -> Identifier    
    Identifier             -> SQIdentifier  
    "'" Identifier "'"     -> SQIdentifier  
    {Identifier "/"}+      -> QualifiedName 
    ~[\=\:\.\"\-\ \t\n\r]+ -> LabelName     

  lexical restrictions
    Identifier -/- [a-zA-Z0-9]
    LabelName -/- ~[\=\:\.\"\-\ \t\n\r]

  context-free syntax
    QualifiedName -> ClassName  
    Identifier    -> FieldName  
    Identifier    -> MethodName 
    "<init>"      -> MethodName {cons("DJ_Init")}
    SQIdentifier  -> VarName    

  context-free syntax
    ClassName  -> ClassRef {cons("DJ_CRef")}
    Int        -> VarRef   {cons("DJ_VarNum")}
    LabelName  -> LabelRef {cons("DJ_LabelRef")}
    FieldName  -> FRef     {cons("DJ_FRef")}
    MethodName -> MRef     {cons("DJ_MRef")}

  syntax
    <ClassRef-CF> "/" <FRef-CF> <LAYOUT?-CF> <FieldDescriptor-CF> -> <FieldRef-CF>  {cons("DJ_JBCFieldRef")}
    <ClassRef-CF> "/" <MRef-CF> <MethodDescriptor-CF>             -> <MethodRef-CF> {cons("DJ_JBCMethodRef")}

  context-free syntax
    "byte"    -> BaseTypeName {cons("DJ_ByteName")}
    "char"    -> BaseTypeName {cons("DJ_CharName")}
    "double"  -> BaseTypeName {cons("DJ_DoubleName")}
    "float"   -> BaseTypeName {cons("DJ_FloatName")}
    "int"     -> BaseTypeName {cons("DJ_IntName")}
    "long"    -> BaseTypeName {cons("DJ_LongName")}
    "short"   -> BaseTypeName {cons("DJ_ShortName")}
    "boolean" -> BaseTypeName {cons("DJ_BooleanName")}

package test.languages.jasmin;

import org.sugarj.languages.Dryad;
import org.sugarj.languages.SugarDryad;

sugar DryadJasminIncludedSyntax{
   
   context-free syntax
    ".limit" "stack" DJInt                                                          -> DJDirective {cons("DJ_JBCLimitStack")}
    ".limit" "locals" DJInt                                                         -> DJDirective {cons("DJ_JBCLimitLocals")}
    ".line" DJInt                                                                   -> DJDirective {cons("DJ_JBCLine")}
    ".throws" DJClassRef                                                            -> DJDirective {cons("DJ_JBCThrows")}
    ".catch" DJClassRef "from" DJLabelRef "to" DJLabelRef "using" DJLabelRef        -> DJDirective {cons("DJ_JBCCatch")}
    ".var" DJInt "is" DJVarName DJFieldDescriptor "from" DJLabelRef "to" DJLabelRef -> DJDirective {cons("DJ_JBCVarDecl")}

  lexical restrictions
    ".limit" "stack" "locals" ".line" ".throws" ".catch" "from" "to" "using"
    ".var" "is" "from" "to" -/- ~[\ \t]

  context-free syntax
    "monitorenter" -> DJInstruction {cons("DJ_MONITORENTER")}
    "monitorexit"  -> DJInstruction {cons("DJ_MONITOREXIT")}

  context-free syntax
    "athrow" -> DJInstruction {cons("DJ_ATHROW")}

  context-free syntax
    "invokespecial" DJMethodRef         -> DJInstruction {cons("DJ_INVOKESPECIAL")}
    "invokenonvirtual" DJMethodRef      -> DJInstruction {cons("DJ_INVOKENONVIRTUAL")}
    "invokevirtual" DJMethodRef         -> DJInstruction {cons("DJ_INVOKEVIRTUAL")}
    "invokestatic" DJMethodRef          -> DJInstruction {cons("DJ_INVOKESTATIC")}
    "invokeinterface" DJMethodRef DJInt -> DJInstruction {cons("DJ_INVOKEINTERFACE")}
    "return"                            -> DJInstruction {cons("DJ_RETURN")}
    "ireturn"                           -> DJInstruction {cons("DJ_IRETURN")}
    "lreturn"                           -> DJInstruction {cons("DJ_LRETURN")}
    "freturn"                           -> DJInstruction {cons("DJ_FRETURN")}
    "dreturn"                           -> DJInstruction {cons("DJ_DRETURN")}
    "areturn"                           -> DJInstruction {cons("DJ_ARETURN")}

  lexical restrictions
    "invokespecial" "invokenonvirtual" "invokevirtual" "invokestatic"
    "invokeinterface" -/- ~[\ \t]

  context-free syntax
    DJInt       -> DJLabelRef  {cons("DJ_Absolute")}
    "$+" DJInt  -> DJRelOffset {cons("DJ_RelativeFwd")}
    "$-" DJInt  -> DJRelOffset {cons("DJ_RelativeBwd")}
    DJLabelRef  -> DJTarget    
    DJRelOffset -> DJTarget    

  context-free syntax
    "ifeq" DJTarget                                            -> DJInstruction {cons("DJ_IFEQ")}
    "iflt" DJTarget                                            -> DJInstruction {cons("DJ_IFLT")}
    "ifle" DJTarget                                            -> DJInstruction {cons("DJ_IFLE")}
    "ifne" DJTarget                                            -> DJInstruction {cons("DJ_IFNE")}
    "ifgt" DJTarget                                            -> DJInstruction {cons("DJ_IFGT")}
    "ifge" DJTarget                                            -> DJInstruction {cons("DJ_IFGE")}
    "ifnull" DJTarget                                          -> DJInstruction {cons("DJ_IFNULL")}
    "ifnonnull" DJTarget                                       -> DJInstruction {cons("DJ_IFNONNULL")}
    "if_icmpeq" DJTarget                                       -> DJInstruction {cons("DJ_IF_ICMPEQ")}
    "if_icmplt" DJTarget                                       -> DJInstruction {cons("DJ_IF_ICMPLT")}
    "if_icmple" DJTarget                                       -> DJInstruction {cons("DJ_IF_ICMPLE")}
    "if_icmpne" DJTarget                                       -> DJInstruction {cons("DJ_IF_ICMPNE")}
    "if_icmpgt" DJTarget                                       -> DJInstruction {cons("DJ_IF_ICMPGT")}
    "if_icmpge" DJTarget                                       -> DJInstruction {cons("DJ_IF_ICMPGE")}
    "if_acmpeq" DJTarget                                       -> DJInstruction {cons("DJ_IF_ACMPEQ")}
    "if_acmpne" DJTarget                                       -> DJInstruction {cons("DJ_IF_ACMPNE")}
    "tableswitch" DJInt DJTableEntry* "default" ":" DJLabelRef -> DJInstruction {cons("DJ_Table")}
    "lookupswitch" DJLookupEntry* "default" ":" DJLabelRef     -> DJInstruction {cons("DJ_Lookup")}
    DJLabelRef                                                 -> DJTableEntry  {cons("DJ_Jump")}
    DJInt ":" DJLabelRef                                       -> DJLookupEntry {cons("DJ_NPAIR")}
    "goto" DJLabelRef                                          -> DJInstruction {cons("DJ_GOTO")}
    "goto_w" DJLabelRef                                        -> DJInstruction {cons("DJ_GOTO_W")}

  lexical restrictions
    "ifeq" "iflt" "ifle" "ifne" "ifgt" "ifge" "ifnull" "ifnonnull" "if_icmpeq"
    "if_icmplt" "if_icmple" "if_icmpne" "if_icmpgt" "if_icmpge" "if_acmpeq"
    "if_acmpne" "tableswitch" "goto" "goto_w" -/- ~[\ \t]

  context-free syntax
    "pop"     -> DJInstruction {cons("DJ_POP")}
    "pop2"    -> DJInstruction {cons("DJ_POP2")}
    "dup"     -> DJInstruction {cons("DJ_DUP")}
    "dup2"    -> DJInstruction {cons("DJ_DUP2")}
    "dup_x1"  -> DJInstruction {cons("DJ_DUP_X1")}
    "dup2_x1" -> DJInstruction {cons("DJ_DUP2_X1")}
    "dup_x2"  -> DJInstruction {cons("DJ_DUP_X2")}
    "dup2_x2" -> DJInstruction {cons("DJ_DUP2_X2")}
    "swap"    -> DJInstruction {cons("DJ_SWAP")}

  context-free syntax
    "new" DJClassRef                   -> DJInstruction {cons("DJ_NEW")}
    "newarray" DJBaseTypeName          -> DJInstruction {cons("DJ_NEWARRAY")}
    "anewarray" DJClassRef             -> DJInstruction {cons("DJ_ANEWARRAY")}
    "anewarray" DJArrayType            -> DJInstruction {cons("DJ_ANEWARRAY")}
    "multianewarray" DJArrayType DJInt -> DJInstruction {cons("DJ_MULTIANEWARRAY")}
    "getfield" DJFieldRef              -> DJInstruction {cons("DJ_GETFIELD")}
    "putfield" DJFieldRef              -> DJInstruction {cons("DJ_PUTFIELD")}
    "getstatic" DJFieldRef             -> DJInstruction {cons("DJ_GETSTATIC")}
    "putstatic" DJFieldRef             -> DJInstruction {cons("DJ_PUTSTATIC")}
    "iaload"                           -> DJInstruction {cons("DJ_IALOAD")}
    "laload"                           -> DJInstruction {cons("DJ_LALOAD")}
    "baload"                           -> DJInstruction {cons("DJ_BALOAD")}
    "caload"                           -> DJInstruction {cons("DJ_CALOAD")}
    "saload"                           -> DJInstruction {cons("DJ_SALOAD")}
    "faload"                           -> DJInstruction {cons("DJ_FALOAD")}
    "daload"                           -> DJInstruction {cons("DJ_DALOAD")}
    "aaload"                           -> DJInstruction {cons("DJ_AALOAD")}
    "iastore"                          -> DJInstruction {cons("DJ_IASTORE")}
    "lastore"                          -> DJInstruction {cons("DJ_LASTORE")}
    "bastore"                          -> DJInstruction {cons("DJ_BASTORE")}
    "castore"                          -> DJInstruction {cons("DJ_CASTORE")}
    "sastore"                          -> DJInstruction {cons("DJ_SASTORE")}
    "fastore"                          -> DJInstruction {cons("DJ_FASTORE")}
    "dastore"                          -> DJInstruction {cons("DJ_DASTORE")}
    "aastore"                          -> DJInstruction {cons("DJ_AASTORE")}
    "arraylength"                      -> DJInstruction {cons("DJ_ARRAYLENGTH")}
    "checkcast" DJClassRef             -> DJInstruction {cons("DJ_CHECKCAST")}
    "instanceof" DJClassRef            -> DJInstruction {cons("DJ_INSTANCEOF")}

  lexical restrictions
    "new" "newarray" "anewarray" "multianewarray" "getfield" "putfield"
    "getstatic" "putstatic" "checkcast" "instanceof" -/- ~[\ \t]

  context-free syntax
    "i2l"       -> DJInstruction {cons("DJ_I2L")}
    "i2f"       -> DJInstruction {cons("DJ_I2F")}
    "i2d"       -> DJInstruction {cons("DJ_I2D")}
    "l2f"       -> DJInstruction {cons("DJ_L2F")}
    "l2d"       -> DJInstruction {cons("DJ_L2D")}
    "f2d"       -> DJInstruction {cons("DJ_F2D")}
    "int2byte"  -> DJInstruction {cons("DJ_I2B")}
    "int2short" -> DJInstruction {cons("DJ_I2S")}
    "int2char"  -> DJInstruction {cons("DJ_I2C")}
    "l2i"       -> DJInstruction {cons("DJ_L2I")}
    "f2i"       -> DJInstruction {cons("DJ_F2I")}
    "f2l"       -> DJInstruction {cons("DJ_F2L")}
    "d2i"       -> DJInstruction {cons("DJ_D2I")}
    "d2l"       -> DJInstruction {cons("DJ_D2L")}
    "d2f"       -> DJInstruction {cons("DJ_D2F")}

  context-free syntax
    "iadd"                   -> DJInstruction {cons("DJ_IADD")}
    "iand"                   -> DJInstruction {cons("DJ_IAND")}
    "idiv"                   -> DJInstruction {cons("DJ_IDIV")}
    "imul"                   -> DJInstruction {cons("DJ_IMUL")}
    "ineg"                   -> DJInstruction {cons("DJ_INEG")}
    "ior"                    -> DJInstruction {cons("DJ_IOR")}
    "irem"                   -> DJInstruction {cons("DJ_IREM")}
    "ishl"                   -> DJInstruction {cons("DJ_ISHL")}
    "ishr"                   -> DJInstruction {cons("DJ_ISHR")}
    "isub"                   -> DJInstruction {cons("DJ_ISUB")}
    "iushr"                  -> DJInstruction {cons("DJ_IUSHR")}
    "ixor"                   -> DJInstruction {cons("DJ_IXOR")}
    "ladd"                   -> DJInstruction {cons("DJ_LADD")}
    "land"                   -> DJInstruction {cons("DJ_LAND")}
    "ldiv"                   -> DJInstruction {cons("DJ_LDIV")}
    "lmul"                   -> DJInstruction {cons("DJ_LMUL")}
    "lneg"                   -> DJInstruction {cons("DJ_LNEG")}
    "lor"                    -> DJInstruction {cons("DJ_LOR")}
    "lrem"                   -> DJInstruction {cons("DJ_LREM")}
    "lshl"                   -> DJInstruction {cons("DJ_LSHL")}
    "lshr"                   -> DJInstruction {cons("DJ_LSHR")}
    "lsub"                   -> DJInstruction {cons("DJ_LSUB")}
    "lushr"                  -> DJInstruction {cons("DJ_LUSHR")}
    "lxor"                   -> DJInstruction {cons("DJ_LXOR")}
    "fadd"                   -> DJInstruction {cons("DJ_FADD")}
    "fdiv"                   -> DJInstruction {cons("DJ_FDIV")}
    "fmul"                   -> DJInstruction {cons("DJ_FMUL")}
    "fneg"                   -> DJInstruction {cons("DJ_FNEG")}
    "frem"                   -> DJInstruction {cons("DJ_FREM")}
    "fsub"                   -> DJInstruction {cons("DJ_FSUB")}
    "dadd"                   -> DJInstruction {cons("DJ_DADD")}
    "ddiv"                   -> DJInstruction {cons("DJ_DDIV")}
    "dmul"                   -> DJInstruction {cons("DJ_DMUL")}
    "dneg"                   -> DJInstruction {cons("DJ_DNEG")}
    "drem"                   -> DJInstruction {cons("DJ_DREM")}
    "dsub"                   -> DJInstruction {cons("DJ_DSUB")}
    "iinc" DJVarRef DJAmount -> DJInstruction {cons("DJ_IINC")}
    DJInt                    -> DJAmount      
    "-" DJInt                -> DJAmount      {cons("DJ_Neg")}
    "fcmpg"                  -> DJInstruction {cons("DJ_FCMPG")}
    "fcmpl"                  -> DJInstruction {cons("DJ_FCMPL")}
    "dcmpg"                  -> DJInstruction {cons("DJ_DCMPG")}
    "dcmpl"                  -> DJInstruction {cons("DJ_DCMPL")}
    "lcmp"                   -> DJInstruction {cons("DJ_LCMP")}

  lexical restrictions
    "iinc" -/- ~[\ \t]

  context-free syntax
    "bipush" DJInt      -> DJInstruction {cons("DJ_BIPUSH")}
    "sipush" DJInt      -> DJInstruction {cons("DJ_SIPUSH")}
    "iconst_m1"         -> DJInstruction {cons("DJ_ICONST_M1")}
    "iconst_0"          -> DJInstruction {cons("DJ_ICONST_0")}
    "iconst_1"          -> DJInstruction {cons("DJ_ICONST_1")}
    "iconst_2"          -> DJInstruction {cons("DJ_ICONST_2")}
    "iconst_3"          -> DJInstruction {cons("DJ_ICONST_3")}
    "iconst_4"          -> DJInstruction {cons("DJ_ICONST_4")}
    "iconst_5"          -> DJInstruction {cons("DJ_ICONST_5")}
    "lconst_0"          -> DJInstruction {cons("DJ_LCONST_0")}
    "lconst_1"          -> DJInstruction {cons("DJ_LCONST_1")}
    "fconst_0"          -> DJInstruction {cons("DJ_FCONST_0")}
    "fconst_1"          -> DJInstruction {cons("DJ_FCONST_1")}
    "fconst_2"          -> DJInstruction {cons("DJ_FCONST_2")}
    "dconst_0"          -> DJInstruction {cons("DJ_DCONST_0")}
    "dconst_1"          -> DJInstruction {cons("DJ_DCONST_1")}
    "aconst_null"       -> DJInstruction {cons("DJ_ACONST_NULL")}
    "ldc" DJConstant    -> DJInstruction {cons("DJ_LDC")}
    "ldc2_w" DJConstant -> DJInstruction {cons("DJ_LDC2_W")}

  context-free syntax
    "iload" DJVarRef  -> DJInstruction {cons("DJ_ILOAD")}
    "lload" DJVarRef  -> DJInstruction {cons("DJ_LLOAD")}
    "fload" DJVarRef  -> DJInstruction {cons("DJ_FLOAD")}
    "dload" DJVarRef  -> DJInstruction {cons("DJ_DLOAD")}
    "aload" DJVarRef  -> DJInstruction {cons("DJ_ALOAD")}
    "iload_0"         -> DJInstruction {cons("DJ_ILOAD_0")}
    "iload_1"         -> DJInstruction {cons("DJ_ILOAD_1")}
    "iload_2"         -> DJInstruction {cons("DJ_ILOAD_2")}
    "iload_3"         -> DJInstruction {cons("DJ_ILOAD_3")}
    "aload_0"         -> DJInstruction {cons("DJ_ALOAD_0")}
    "aload_1"         -> DJInstruction {cons("DJ_ALOAD_1")}
    "aload_2"         -> DJInstruction {cons("DJ_ALOAD_2")}
    "aload_3"         -> DJInstruction {cons("DJ_ALOAD_3")}
    "lload_0"         -> DJInstruction {cons("DJ_LLOAD_0")}
    "lload_1"         -> DJInstruction {cons("DJ_LLOAD_1")}
    "lload_2"         -> DJInstruction {cons("DJ_LLOAD_2")}
    "lload_3"         -> DJInstruction {cons("DJ_LLOAD_3")}
    "dload_0"         -> DJInstruction {cons("DJ_DLOAD_0")}
    "dload_1"         -> DJInstruction {cons("DJ_DLOAD_1")}
    "dload_2"         -> DJInstruction {cons("DJ_DLOAD_2")}
    "dload_3"         -> DJInstruction {cons("DJ_DLOAD_3")}
    "fload_0"         -> DJInstruction {cons("DJ_FLOAD_0")}
    "fload_1"         -> DJInstruction {cons("DJ_FLOAD_1")}
    "fload_2"         -> DJInstruction {cons("DJ_FLOAD_2")}
    "fload_3"         -> DJInstruction {cons("DJ_FLOAD_3")}
    "istore" DJVarRef -> DJInstruction {cons("DJ_ISTORE")}
    "lstore" DJVarRef -> DJInstruction {cons("DJ_LSTORE")}
    "fstore" DJVarRef -> DJInstruction {cons("DJ_FSTORE")}
    "dstore" DJVarRef -> DJInstruction {cons("DJ_DSTORE")}
    "astore" DJVarRef -> DJInstruction {cons("DJ_ASTORE")}
    "istore_0"        -> DJInstruction {cons("DJ_ISTORE_0")}
    "istore_1"        -> DJInstruction {cons("DJ_ISTORE_1")}
    "istore_2"        -> DJInstruction {cons("DJ_ISTORE_2")}
    "istore_3"        -> DJInstruction {cons("DJ_ISTORE_3")}
    "astore_0"        -> DJInstruction {cons("DJ_ASTORE_0")}
    "astore_1"        -> DJInstruction {cons("DJ_ASTORE_1")}
    "astore_2"        -> DJInstruction {cons("DJ_ASTORE_2")}
    "astore_3"        -> DJInstruction {cons("DJ_ASTORE_3")}
    "lstore_0"        -> DJInstruction {cons("DJ_LSTORE_0")}
    "lstore_1"        -> DJInstruction {cons("DJ_LSTORE_1")}
    "lstore_2"        -> DJInstruction {cons("DJ_LSTORE_2")}
    "lstore_3"        -> DJInstruction {cons("DJ_LSTORE_3")}
    "fstore_0"        -> DJInstruction {cons("DJ_FSTORE_0")}
    "fstore_1"        -> DJInstruction {cons("DJ_FSTORE_1")}
    "fstore_2"        -> DJInstruction {cons("DJ_FSTORE_2")}
    "fstore_3"        -> DJInstruction {cons("DJ_FSTORE_3")}
    "dstore_0"        -> DJInstruction {cons("DJ_DSTORE_0")}
    "dstore_1"        -> DJInstruction {cons("DJ_DSTORE_1")}
    "dstore_2"        -> DJInstruction {cons("DJ_DSTORE_2")}
    "dstore_3"        -> DJInstruction {cons("DJ_DSTORE_3")}

  lexical restrictions
    "iload" "lload" "fload" "dload" "aload" "istore" "lstore" "fstore" "dstore"
    "astore" -/- ~[\ \t]

  context-free syntax
    "nop"                   -> DJInstruction   {cons("DJ_NOP")}
    "breakpoint"            -> DJInstruction   {cons("DJ_BREAKPOINT")}
    DJInt ":" DJInstruction -> DJPCInstruction {cons("DJ_PC")}
    DJInstruction           -> DJPCInstruction 

  context-free syntax
    ".method" DJMethodAccess* DJMethodName DJMethodDescriptor DJStatement* ".end" "method" -> DJMethod       {cons("DJ_JBCMethod"), scope(Label)}
    "public"                                                                               -> DJMethodAccess {cons("PUBLIC")}
    "private"                                                                              -> DJMethodAccess {cons("DJ_PRIVATE")}
    "protected"                                                                            -> DJMethodAccess {cons("PROTECTED")}
    "static"                                                                               -> DJMethodAccess {cons("STATIC")}
    "final"                                                                                -> DJMethodAccess {cons("FINAL")}
    "synchronized"                                                                         -> DJMethodAccess {cons("SYNCHRONIZED")}
    "native"                                                                               -> DJMethodAccess {cons("NATIVE")}
    "abstract"                                                                             -> DJMethodAccess {cons("ABSTRACT")}

  context-free syntax
    DJPCInstruction -> DJStatement 
    DJDirective     -> DJStatement 
    DJLabel         -> DJStatement 
    DJLabelName ":" -> DJLabel     {cons("DJ_JBCLabel")}

  lexical restrictions
    ".method" ".end" "public" "private" "protected" "static" "final"
    "synchronized" "native" "abstract" -/- ~[\ \t]

  context-free syntax
    ".field" DJFieldAccess* DJFieldName DJFieldDescriptor DJFieldSignatureSpec DJInitialValue       -> DJField              {cons("DJ_JBCField")}
    ".field" DJFieldAccess* DJFieldName DJFieldDescriptor DJInitialValue DJFieldExt* ".end" "field" -> DJField              {cons("DJ_JBCExtField")}
    ".signature" DJFieldSignature                                                                   -> DJFieldExt           {cons("DJ_JBCSignature")}
    ".deprecated"                                                                                   -> DJFieldExt           {cons("DJ_JBCDeprecated")}
    "signature" DJFieldSignature                                                                    -> DJFieldSignatureSpec {cons("DJ_FieldSig")}
                                                                                                    -> DJFieldSignatureSpec {cons("None")}
    "=" DJConstant                                                                                  -> DJInitialValue       {cons("DJ_InitVal")}
                                                                                                    -> DJInitialValue       {cons("None")}
    "public"                                                                                        -> DJFieldAccess        {cons("PUBLIC")}
    "private"                                                                                       -> DJFieldAccess        {cons("DJ_PRIVATE")}
    "protected"                                                                                     -> DJFieldAccess        {cons("PROTECTED")}
    "static"                                                                                        -> DJFieldAccess        {cons("STATIC")}
    "final"                                                                                         -> DJFieldAccess        {cons("FINAL")}
    "volatile"                                                                                      -> DJFieldAccess        {cons("VOLATILE")}
    "transient"                                                                                     -> DJFieldAccess        {cons("TRANSIENT")}

  lexical restrictions
    ".field" ".end" ".signature" ".deprecated" "signature" "public" "private"
    "protected" "static" "final" "volatile" "transient" -/- ~[\ \t]

  lexical syntax
    DJString -> DJClassSignature 
    DJString -> DJFieldSignature 

  context-free syntax
    DJFieldType  -> DJFieldDescriptor     {cons("DJ_JBCFieldDesc")}
    DJFieldType  -> DJParameterDescriptor 
    DJFieldType  -> DJReturnDescriptor    
    "V"          -> DJReturnDescriptor    {cons("Void")}
    DJBaseType   -> DJFieldType           
    DJObjectType -> DJFieldType           
    DJArrayType  -> DJFieldType           
    "B"          -> DJBaseType            {cons("Byte")}
    "C"          -> DJBaseType            {cons("Char")}
    "D"          -> DJBaseType            {cons("Double")}
    "F"          -> DJBaseType            {cons("Float")}
    "I"          -> DJBaseType            {cons("Int")}
    "J"          -> DJBaseType            {cons("Long")}
    "S"          -> DJBaseType            {cons("Short")}
    "Z"          -> DJBaseType            {cons("Boolean")}
    DJFieldType  -> DJComponentType       

  syntax
    "(" <DJParameterDescriptor-CF>* ")" <DJReturnDescriptor-CF> -> <DJMethodDescriptor-CF> {cons("DJ_JBCMethodDesc")}
    "L" <DJClassRef-CF> ";"                                     -> <DJObjectType-CF>       {cons("DJ_Reference")}
    "[" <DJComponentType-CF>                                    -> <DJArrayType-CF>        {cons("DJ_Array")}

  lexical syntax
    '"' DJStringChar* '"'                                -> DJString     
    ~[\"\\\n\r]                                          -> DJStringChar 
    [\\] [nrtfb\"\'\\]                                   -> DJStringChar 
    [\\] 'u' DJHexDigit DJHexDigit DJHexDigit DJHexDigit -> DJStringChar 
    [0-9a-fA-F]                                          -> DJHexDigit   

  context-free syntax
    DJString -> DJConstant 

  lexical syntax
    [0-9] [0-9]* -> DJInt 

  lexical restrictions
    DJInt -/- [0-9]

  context-free syntax
    DJInt -> DJConstant 

  lexical syntax
    [A-Za-z] [A-Za-z0-9]*  -> DJIdentifier    
    DJIdentifier           -> DJSQIdentifier  
    "'" DJIdentifier "'"   -> DJSQIdentifier  
    {DJIdentifier "/"}+    -> DJQualifiedName 
    ~[\=\:\.\"\-\ \t\n\r]+ -> DJLabelName     

  lexical restrictions
    DJIdentifier -/- [a-zA-Z0-9]
    DJLabelName -/- ~[\=\:\.\"\-\ \t\n\r]

  context-free syntax
    DJQualifiedName -> DJClassName  
    DJIdentifier    -> DJFieldName  
    DJIdentifier    -> DJMethodName 
    "<init>"        -> DJMethodName {cons("DJ_Init")}
    DJSQIdentifier  -> DJVarName    

  context-free syntax
    DJClassName  -> DJClassRef {cons("DJ_CRef")}
    DJInt        -> DJVarRef   {cons("DJ_VarNum")}
    DJLabelName  -> DJLabelRef {cons("DJ_LabelRef")}
    DJFieldName  -> DJFRef     {cons("DJ_FRef")}
    DJMethodName -> DJMRef     {cons("DJ_MRef")}

  syntax
    <DJClassRef-CF> "/" <DJFRef-CF> <LAYOUT?-CF> <DJFieldDescriptor-CF> -> <DJFieldRef-CF>  {cons("DJ_JBCFieldRef")}
    <DJClassRef-CF> "/" <DJMRef-CF> <DJMethodDescriptor-CF>             -> <DJMethodRef-CF> {cons("DJ_JBCMethodRef")}

  context-free syntax
    "byte"    -> DJBaseTypeName {cons("DJ_ByteName")}
    "char"    -> DJBaseTypeName {cons("DJ_CharName")}
    "double"  -> DJBaseTypeName {cons("DJ_DoubleName")}
    "float"   -> DJBaseTypeName {cons("DJ_FloatName")}
    "int"     -> DJBaseTypeName {cons("DJ_IntName")}
    "long"    -> DJBaseTypeName {cons("DJ_LongName")}
    "short"   -> DJBaseTypeName {cons("DJ_ShortName")}
    "boolean" -> DJBaseTypeName {cons("DJ_BooleanName")}

  context-free syntax
    DJBytecodeSpec DJSourceSpec DJClassSpec DJSuperSpec DJImplementsSpec* DJSignatureSpec DJEnclosingSpec DJDeprecatedSpec -> DJJasminHeader {cons("DJ_JBCHeader")}

  context-free syntax
    ".bytecode" DJMajorVersion DJMinorVersion -> DJBytecodeSpec {cons("DJ_JBCVersion")}
                                              -> DJBytecodeSpec {cons("None")}
    DJInt                                     -> DJMajorVersion {cons("DJ_Major")}
    "." DJInt                                 -> DJMinorVersion {cons("DJ_Minor")}
                                              -> DJMinorVersion {cons("None")}
    ".source" DJString                        -> DJSourceSpec   {cons("DJ_JBCSource")}
                                              -> DJSourceSpec   {cons("None")}

  context-free syntax
    ".class" DJClassAccess* DJClassName     -> DJClassSpec      {cons("DJ_JBCClass")}
    ".interface" DJClassAccess* DJClassName -> DJClassSpec      {cons("DJ_JBCInterface")}
    "public"                                -> DJClassAccess    {cons("PUBLIC")}
    "final"                                 -> DJClassAccess    {cons("FINAL")}
    "interface"                             -> DJClassAccess    {cons("DJ_INTERFACE")}
    "abstract"                              -> DJClassAccess    {cons("ABSTRACT")}
    "super"                                 -> DJClassAccess    {cons("DJ_SUPER")}
    ".super" DJClassName                    -> DJSuperSpec      {cons("DJ_JBCSuper")}
    ".implements" DJClassName               -> DJImplementsSpec {cons("DJ_JBCImplements")}

  context-free syntax
    ".signature" DJClassSignature            -> DJSignatureSpec  {cons("DJ_JBCSignature")}
                                             -> DJSignatureSpec  {cons("None")}
    ".enclosing" "method" DJMethodDescriptor -> DJEnclosingSpec  {cons("DJ_JBCEnclosing")}
                                             -> DJEnclosingSpec  {cons("None")}
    ".deprecated"                            -> DJDeprecatedSpec {cons("DJ_JBCDeprecated")}
                                             -> DJDeprecatedSpec {cons("None")}

  lexical restrictions
    ".bytecode" ".source" ".class" ".interface" "public" "final" "interface"
    "abstract" "super" ".super" ".implements" ".signature" ".enclosing"
    ".deprecated" -/- ~[\ \t]

  lexical syntax
    [\ \t\n\r]                         -> LAYOUT 
    ";" [\n\r]                         -> LAYOUT {avoid}
    ";" [\ \t] ~[\n\r]* [\n\r] | DJEOF -> LAYOUT {avoid}
                                       -> DJEOF  

  lexical restrictions
    DJEOF -/- ~[]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    //LAYOUT? -/- [\;] . [\ \t]
    LAYOUT? -/- [\;] . [\n\r]


  context-free syntax
    "push" "`" Expr[[Java]]         -> DJInstruction             {cons("JavaExpr")}
    "`" BlockStm[[Java]]            -> DJInstruction             {cons("JavaStm")}
    "`" "[" BlockStm[[Java]]* "]"   -> DJInstruction             {cons("JavaStm")}
    "`" FieldDec[[Java]]            -> DJField {cons("JavaField")}
    "`" MethodDec[[Java]]           -> DJMethod {cons("JavaMethod")}

  context-free syntax
    DJJasminHeader DJField* DJMethod* -> DJJasminFile {cons("DJ_JBCFile")}
    DJJasminFile -> ToplevelDeclaration{cons("DryadBCType")}
}
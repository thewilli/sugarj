package test.languages.jasmin;

import test.languages.jasmin.DryadJasminSignature;

sugar DryadJasminTrans{
	
	desugarings
		desugar-jasmin	
	
	signature constructors
		ClassFile : A * B * C * D * E * F * G * H * I -> J
		MinorVersion : A -> B
		MajorVersion : A -> B
		AccessFlags : A -> B
		ThisClass : A -> B
		SuperClass : A -> B
		Interfaces : A -> B
		Fields : A -> B
		Methods : A -> B
		Attributes : A -> B
		DryadInstruction : A -> B
		JavaMethod : A -> B
		JavaField : A -> B

	rules
		desugar-jasmin : DJ_JBCFile(header,fields,methods) ->
			ClassFile(
				MinorVersion(0),
				MajorVersion(49),
				AccessFlags(flags),
				ThisClass(class),
				SuperClass(Some(super)),
				Interfaces(interfaces),
				Fields(convertedFields),
				Methods(convertedMethods),
				Attributes([])
			)
			where
				<extractClassFlags> header => flags ;
				<extractClassName> header => class ;
				<extractSuperClassName> header => super ;
				<extractInterfaces> header => interfaces ;
				<map(convertField)> fields => convertedFields ;
				<map(convertMethod)> methods => convertedMethods
			
		extractClassFlags : 
			DJ_JBCHeader(_,_,DJ_JBCClass(flags, _),_,_,_,_,_) -> flags
		
		extractClassName :
			DJ_JBCHeader(_,_,DJ_JBCClass(_,class),_,_,_,_,_) -> class
			
		extractSuperClassName :
			DJ_JBCHeader(_,_,_,DJ_JBCSuper(super),_,_,_,_) -> <string-replace(|"/",".")> super
			
		extractInterfaces :
			DJ_JBCHeader(_,_,_,_,interfaces,_,_,_) -> mappedInterfaces
			where
				<map(?DJ_JBCImplements(<id>))> interfaces  => mappedInterfaces
			
		
		convertType : DJ_Reference(DJ_CRef(obj)) -> ObjectType(<string-replace(|"/",".")>obj)
		convertType : DJ_Array(type) -> ArrayType(type)
		//all other types don't need to be converted (native Types like Byte() or Int())	
		
		//TODO: Handle <init>
		convertMethod : JavaMethod(dec) -> dec
		convertMethod : 
			DJ_JBCMethod(flags,name,DJ_JBCMethodDesc(argType,resultType),instructions) ->
			Method(AccessFlags(flags),Name(name),MethodDescriptor(newArgType,newResultType),Attributes(convertedAttributes))
			where
				<topdown(try(convertType))> argType => newArgType ;
				<topdown(try(convertType))> resultType => newResultType ;
				<convertInstructionsToAttributes> instructions => convertedAttributes
				
		convertInstructionsToAttributes : instructions -> [
			Code(
				MaxStack(None()),
				MaxLocals(None()),
				Instructions(convertedInstructions),
				ExceptionTable([]),
				Attributes([])
			)
		]
		where
			<map(try(convertInstruction))> instructions => convertedInstructions
		
		convertInstruction : DJ_JBCLimitStack(_) -> NOP() //handled by Dryad
		convertInstruction : DJ_JBCLimitLocals(_) -> NOP() //handled by Dryad
		
		convertInstruction : DJ_RETURN() -> RETURN()
		
		convertInstruction : DJ_LDC(str) -> LDC(String(<un-double-quote>str))

		convertInstruction : DryadInstruction(x) -> x
		
		convertInstruction : DJ_INVOKEVIRTUAL(
			DJ_JBCMethodRef(
				DJ_CRef(class),
				DJ_MRef(method),
				DJ_JBCMethodDesc(argType,resultType)
			)
		) -> 
		INVOKEVIRTUAL(MethodRef(Class(<string-replace(|"/",".")>class),Name(method),MethodDescriptor(newArgType,newResultType)))
		where
			<topdown(try(convertType))> argType => newArgType ;
			<topdown(try(convertType))> resultType => newResultType
		
		convertInstruction : DJ_GETSTATIC(DJ_JBCFieldRef(DJ_CRef(class),DJ_FRef(field),DJ_JBCFieldDesc(type)))
		-> GETSTATIC(FieldRef(Class(class),Name(field),FieldDescriptor(newType)))
		where
			<topdown(try(convertType))> type => newType
			
		convertField : JavaField(dec) -> dec
			
		convertField :
			DJ_JBCExtField(flags,name,DJ_JBCFieldDesc(type),initVal,_) -> 
			Field(AccessFlags(flags), Name(name), FieldDescriptor(newType), Attributes(newAttributes))
			where
				<convertInitFieldVal> initVal => newAttributes; 
				<topdown(try(convertType))> type => newType
		
		convertInitFieldVal : None() -> []
		 //type distinction is hard to realized, as all types are string-based here
		convertInitFieldVal : _ -> <fail>
		where
			not(?None())
}

module org/sugarj/dryad/Custom

signature constructors
  	Result : A -> B    
	String : A -> B
	Null : A
	ClassImport : A * B * C -> D
	Jar : Path -> Jar

strategies
	
	//external definitions for Java-based strategies
	
	//execute static Java methods
	external CallJavaStatic(|jars,classname,methodname)
	//retrieve source path (of project when compiling)
	external GetSourcePath(|)
	//retrieve absolute file name for a ressource bundled with the Dryad plugin
	external ResolveResource(|)
	
	//retrieve a list of .jar files which are required for calls to class2aterm and aterm2class
  	getJars = id
	    //create list auf .jar names
    	; !["aterm.jar","aterm-java-1.8.2.jar","bcel-5.2.jar","IntermediateLanguage-1.0.jar","jjtraveler.jar","shared-objects.jar","aterm2class.jar"]
	    //add folder prefix
	    ; map(\x -> <concat-strings>["aterm2class/",x]\)
	    //retrieve full path
	    ; map(ResolveResource)

	  //replace for jvm calls
	strjvm-callstatic-new(|class,method) = id
		//ensure argument term is a list of terms
		; as-list
		//wrap string values with Constructor String()
		; map(try(\x -> String(x) where is-string\))
		//get result
		; CallJavaStatic(|<getJars>,class,method)
		//fetch result and parse as term (if possible)
		; (?Result(String(<read-from-string>)) +> ?Result(<id>))
	
	jdebug(what) = 
		where(<concat-strings>["JDEBUG: ",<what>," - "] => str);
		debug(!str)

	processImport =	id
	  //.class files cannot be imported using the native Dryad Compiler mechanism
	  //as they need relative paths to detect package names
	  //(foo/bar.class would detect 'foo' as package name)
	  ; ?ClassImport(simplename,pkgname,path)
      ; !ClassFile(path) => location
      ; <parse-binary-name> simplename => parts
      ; <lookup-or-add-package> pkgname => pkg
      ; <private-classpath-handle-toplevel-class(|pkg)> parts
      ; set-package(|pkg)
      ; set-location(|location)	
        
    fakeid = jdebug(!"fakeid!!!")
        
 	processImport = id
	  ; ?Jar(<id>)
	  //call the regular import mechanism of Dryad Compiler
	  ; id //import-observable-classes-entry
	    
	mystratb = fail
	
	mystrata = debug(!"mystrat") ; mystratb
	
	
	compileClass() = id
		; jdebug(!"compileClass called")
		; mystrata
		; jdebug(!"mystrat ok")
		; where(<hashtable-clear><table-hashtable>) //TODO: do not remove non-dryad content (remove toplevel-tables only)
		; ?[path,imports,<id>]
		//import files
		; ensure-import-observable-classes //TODO: Remove when .jar import works
		; where(<map(processImport)>imports)
		; as-list(map( // unassemble imported classfiles
      		if(is-ClassFile, bc-unasm(dryad-compiler-error))
    	))
    	; topdown(try(trace-terms-to-annos))
    	; bc-unasm
    	; as-list
    	; map(define-compilation-unit)
    	; dryad-reclassify
    	; map(dryad-type-checker-mixed; get-ast)
    	; as-list
   		; dryad-emit(dryad-compiler-error)
   		; jdebug(!"Compilation succeeded!")
   		; ?[<id>]
   		; ![<write-to-string>,path]
   		; strjvm-callstatic-new(|"str.classtree.classify.ClassClassifier","convertAndExport")
		; jdebug(!"Class file written")

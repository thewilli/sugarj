/**
 * dryad-compiler simple (i.e., non-specialized) instruction rewriting and analysis.
 *
 * Predicts stack effects for a given stack, and reports errors.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/backend/asm/instructions/simple

imports
  org/sugarj/dryad/compiler/dryadcompiler/backend/asm
  org/sugarj/dryad/compiler/dryadcompiler/backend/emit/types

strategies

  /** 
   * Given a stack of types and a bytecode instruction,
   * give the stack for the next instruction.
   *
   * @type (List(Type), RichInstruction) -> List(Type)
   */
  bc-stack-effect =
    // Unreachable ops have no effect, unless they don't exist
    (Unreachable, id);
    !Unreachable
  <+
    // Determine the stack for reachable (and existing) ops
    ?(stack, <?byte>);
    
    let
      /**
       * Return the stack effect and typed versions of an instruction.
       * @param inputs  The number of input values required on the stack.
       */
      op(effect |inputs) =
        <split-at(|inputs)> stack => (<id>, stacktail);
        if (?[<id>]; effect <+ effect) => result then
          <conc> (<as-list> result, stacktail)
        else
          map(Any); ![Any | stacktail]
        end
      <+
        bc-input-error(|stack, byte, inputs);
        bc-asm-abort

      nop = !stack // same as op(![] |0)

      /**
       * Return the stack effect for an operator that only pushes a value.
       * (Less general than 'op', but allows for more specific errors.)
       */
      pop(|need) =
        <is-bc-subtype(|need)> <Hd> stack;
        <Tl> stack
      <+
        bc-error(|"Value required of type", need, byte);
        bc-asm-abort
      
      op-on-words(effect |inputs) =
        stack-to-words;
        <split-at(|inputs)> stack => (<id>, stack');
        ([effect] <+ effect; as-list);
        <conc> (<id>, stack');
        words-to-stack
      <+
        badstack := <try(stack-to-words; try(take(|inputs)); words-to-stack)> stack;
        bc-input-error(|badstack, byte, inputs);
        bc-asm-abort
    in    
    // Instructions with zero arguments
      LOAD(id);          op(!<bc-load-type> byte |0)
    + NEW(?t);           op(!t                   |0)
    + Final(id);         nop
    + RETURN;            nop
    + BREAKPOINT;        nop
    + GOTO(id);          nop
    + Label(id);         nop
    + NOP;               nop
    
    // Instructions with one or more arguments
    + I2B;               op(is-single-integral;     !Byte    |1)
    + I2C;               op(is-single-integral;     !Char    |1)
    + I2S;               op(is-single-integral;     !Short   |1)
    + ARRAYLENGTH;       op(ArrayType(id);          !Int     |1)
    + ATHROW;            op(not(is-primitive-type); ![]      |1)
    + INSTANCEOF(id);    op(not(is-primitive-type); !Boolean |1)
    + CHECKCAST(?t);     op(not(is-primitive-type); !t       |1)
    + SWAP;              op(map(not(Long + Double)); reverse |2)
    + STORE(?name);      op(?t; ![] |1); where(<bc-narrow-local-type> (name, t))
    + not(GOTO(id));
      bc-get-jump-target; pop(|Boolean) // conditional gotos / ifs

    // Instructions that operate on words (long & double are two words wide)
    // (regular DUP, DUP_X1 and POP are specialized on type; see specialized module)
    + POP2;    op-on-words(\[a,b]     -> []\            |2)
    + DUP_X2;  op-on-words(\[a,b,c]   -> [a,b,c,a]\     |3)
    + DUP2;    op-on-words(\[a,b]     -> [a,b,a,b]\     |2)
    + DUP2_X1; op-on-words(\[a,b,c]   -> [a,b,c,a,b]\   |3)
    + DUP2_X2; op-on-words(\[a,b,c,d] -> [a,b,c,d,a,b]\ |4)
    
    // Misc. instructions
    + PUTSTATIC(?|[ ~o.~_ : ~t ]|); pop(|t)
    + GETSTATIC(?|[ ~o.~_ : ~t ]|); op(!t                                          |0)
    + GETFIELD( ?|[ ~o.~_ : ~t ]|); op(is-bc-subtype(|o);                      !t  |1)
    + PUTFIELD( ?|[ ~o.~_ : ~t ]|); op([is-bc-subtype(|t), is-bc-subtype(|o)]; ![] |2)
    
    + MULTIANEWARRAY(?type, string-to-int => dim);
      op(map(is-single-integral); !ArrayType(type) | dim)
    
    // Inline Java code (only exists during analysis)
    // FIXME: Pass current input stack to embedded Java using dynamic rules
    //        (allowing something like [ ... `if ([dup]) ... ])
    + JavaStm(?j);
      <as-list; dryad-type-checker-mixed> j; // register locals etc. to rules
      nop
    + JavaExpr(?j);
      type := <is-Expr; dryad-type-checker-mixed; type-attr> j;
      ![<source-type-to-bytecode-type> type | stack]
    end
  <+
    bc-invoke-effect
  <+ // Last resort (may not override load/store above)
    bc-specialize-instruction; Fst

  bc-load-type:
    LOAD(name) -> type
    where type := <bc-local-type> name
       <+ type := Any // unassigned; error reported elsewhere

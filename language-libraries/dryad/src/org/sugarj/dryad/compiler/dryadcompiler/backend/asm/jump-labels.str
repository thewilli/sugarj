/** 
 * dryad-compiler jump instruction rewriting strategies.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/backend/asm/jump-labels

strategies

  /**
   * Replace all jump labels with offsets.
   *
   * @note Must be called from within bc-asm-record-labels-wrap.
   */
  bc-asm-jumps =
    bc-number-wrapped({
      ?(jump, index);
      <bc-get-jump-target> jump;
      count := <subt> (<LabelPos>, index); // compute relative index
      <one(!Count(count))> jump            // replace label with index
    <+
      ?(Label(_), _); ![] // remove all labels
    <+
      Fst // ignore other ops
    })
  
  /**
   * Define a scoped set of LabelPos rules, based on the current bytecode
   * fragment, and execute strategy s.
   */
  bc-asm-record-labels-wrap(s) =
  {| LabelPos:
    bc-number-wrapped({
      if ?(Label(name), index) then
        not(<LabelPos> name);
        rules(LabelPos: name -> index)
      <+
        bc-error(|"Label already exists", name);
        bc-asm-abort
      end;
      
      Fst // throw away instruction offset
    });
    s
  |}
  
  /** Confirm all jump locations exist and there are no duplicate labels. */
  bc-verify-labels =
    where(
      bc-asm-record-labels-wrap(
        topdown(
          ?Trace(_, <id>) // don't step into traced code territory
        <+
          if (bc-get-jump-target + ?Catch(<id>, _)); not(LabelPos) then
            bc-error(|"Label does not exist", <id>); bc-asm-abort
          end
        )
      )
    )

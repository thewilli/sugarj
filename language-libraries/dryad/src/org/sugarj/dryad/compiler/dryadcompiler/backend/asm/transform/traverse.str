/**
 * dryad-compiler bytecode traversal strategies.
 *
 * Regular bytecode is a flat stream of instructions, and allows
 * convenient traversal using the standard all/one/collect operators.
 * These strategies provide equivalents for use with rich bytecode,
 * that may have a more tree-like structure with 'Trace' and
 * exception wrappers.
 *
 * Information from traversed tags will be stored in scoped dynamic rules,
 * such as LastTrace and ExceptionHandlers. This ensures that errors
 * reported from any position in a method can be traced back to the source.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/backend/asm/transform/traverse

/** Bytecode traversal operators. */
strategies

  // TODO2: Some of the bytecode traverse strategies could be rewritten for traces.
  //        Especially bc-collect* is only used for dealing with traces.

  /** Apply a strategy to all instructions in a bytecode list. */
  bc-all(s) = bc-maybe-apply-to-wrap(map(bc-all(s)), s)

  /** Apply a strategy to one instruction in a bytecode list. */
  bc-one(s) = bc-maybe-apply-to-wrap(fetch(bc-one(s)), s)

  /** Given a list of instructions, returns those to which strategy s applies. */
  bc-collect(s) =
    let bc-some(s2) =
      bc-all(if(s, s2))
    in
      collect-argument-invokes(bc-some)
    end

  /**
   * Given a list of instructions, returns those to which strategy s applies,
   * but ensure they are wrapped in a Trace (if there was any).
   */
  bc-collect-wrapped(s) =
    dr-ignore-state(
      bc-collect(
        s;
        if LastTrace => Trace(old, _) then
          !Trace(old, <id>)
        end
      )
    | "LastTrace"
    )

  /**
   * Number all instructions and tags according to their position,
   * while applying strategy s to each.
   *
   * (Based on number(s) in the standard library.)
   *
   * Example:
   *  <bc-number-wrapped(id)> [NOP, Label("foo"), NOP] =>
   *                          [(0, NOP), (1, Label("foo")), (1, NOP)]
   */
  bc-number-wrapped(s) =
    bc-number-wrapped'(s|0) => (<id>, _)
  
  /** @internal */
  bc-number-wrapped'(s|index) =
    switch id      
      case is-list: // apply to each item of list
        [ bc-number-wrapped'(s|index) => (<id>, index')
        | bc-number-wrapped'(s|index') => (<id>, index'')
        ];
        !(<id>, index'')
      <+
        []; !([], index)

      case is-bc-wrap: // apply to wrap and its contents
        ?input;
        bc-apply-to-wrap(bc-number-wrapped'(s|index) => (<id>, index'));
        <s> (<id>, (index, index'));
        !(<id>, index')
      
      case Label(id) + Final(id):
        <s> (<id>, index); !(<id>, index) // don't increment count

      otherwise:
        <s> (<id>, index); !(<id>, <inc> index)
    end
    

/** Application of a strategy to a wrapped term. */
strategies

  /**
   * Apply a strategy to the contents of a bytecode wrap term, such as
   * Trace, CatchWrap, or Labeled. Information from traversed tags
   * will be stored in scoped dynamic rules, including LastTrace and
   * ExceptionHandlers.
   */
  bc-apply-to-wrap(s) =
    switch id  
      case ?Trace(_, _) => traced:
      {| LastTrace:
        rules(LastTrace := traced);
        Trace(id, as-list; s)
      |}
      
      // TODO: verify the exception handling verification implementation
      //       the spec isn't exactly clear on this...
      case ?CatchWrap(catches, _):
      {| ExceptionHandlers: // collect all handler labels
        where(
          <map(?Catch(<id>, _))> catches;
          try(<conc> (<ExceptionHandlers>, <id>)) => allCatches;
          rules(ExceptionHandlers := allCatches)
        );
        
        CatchWrap(id, as-list; s)
      |}
      
      case Labeled(id, id):
        // Process 'Labeled' term by translation to 'Label' term.
        // (Labeled only appears in unprocessed bytecode.)
        let flatten: Labeled(Id(label), body) -> [Label(label), body]
            unflatten: [Label(label') | body'] -> Labeled(Id(label'), body')
        in 
          flatten;
          s;
          (unflatten <+ !Labeled(Id(label), <id>))
        end
      
      case ?EndTrace(code):
        !EndTrace(<disable-trace(s)> code)
      
      case is-list: // Unflattened bytecode can contain inner lists; treat as wrapper
        s
    end

  /** @internal */
  is-bc-wrap = bc-apply-to-wrap(id)

  /**
   * Apply strategy 'wrap' to a list of instructions using bc-apply-to-wrap,
   * unless the input is a single instruction, in which case strategy 'op'
   * is executed on the original input.
   */
  bc-maybe-apply-to-wrap(wrap, op) =
    let wrap' =
      ?applied; wrap
    in
      bc-apply-to-wrap(wrap') <+ not(!applied); op
    end

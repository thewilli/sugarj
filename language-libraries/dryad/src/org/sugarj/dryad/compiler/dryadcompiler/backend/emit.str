/**
 * dryad-compiler emit.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/backend/emit

imports libstratego-lib
        org/sugarj/dryad/compiler/dryadcompiler/backend/asm/-
        org/sugarj/dryad/compiler/dryadcompiler/backend/asm/transform/-
        org/sugarj/dryad/compiler/dryadcompiler/backend/emit/-
        org/sugarj/dryad/compiler/dryadcompiler/lib-ext/-
        org/sugarj/languages/Java-Bytecode

strategies
  // Default argument overloads
  dryad-emit = dryad-emit(dryad-compiler-error)

  //hook template
  hook-dryad-emit-java(s) = fail

  /**
   * Emits rich bytecode, and can be extended for other inputs.
   * Fails if no bytecode can be emitted for a given term, and
   * neither 'extension' nor 'onfailure' below succeeds.
   *
   * @param onfailure  Strategy that gets an DryadError or DryadWarning term for
   *                   each error or warning, may fail the entire strategy.
   *                   Executed after the default emit fails, it may also be
   *                   used to emit constructs from a language extension,
   *                   as an alternative for the extension parameter.
   *                   Default: dryad-compiler-error
   */
  dryad-emit(onfailure) =
    let
      emit =
        traverse-trace-tags(emit) // handle source trace annotations
      <+
        ContextEmit // (rule; emit in certain contexts)
      <+
        hook-dryad-emit-java(emit)
      <+  
        emit-java(emit)
      <+
        emit-bytecode(emit)
      <+
        handle-failure

      handle-failure =
        IgnoreError
      <+
        if DryadError(id, id) + DryadWarning(id, id) then
          where(dryad-ignore-repeated-errors)
        end;
        onfailure
      <+ // Term unhandled by user
        not(DryadError(id, id) + DryadWarning(id, id));        
        <handle-failure> DryadError("Unable to compile this construct", <id>)
      <+ // onfailure failed
        log(|Debug, "dryad-emit onfailure strategy failed.", <id>);
        rules(EmitFailed: _)
    in
      {| EmitFailed, IgnoreError:
        trace(emit);                       not(EmitFailed);
        dryad-emit-output(handle-failure); not(EmitFailed)
      |}
    end
  
  /**
   * Enter stage 3 (assembly) or verify the output after emitting code.
   * 
   * @internal
   */
  dryad-emit-output(onfailure) =
    if Stage-gt(|2) then
      log-timed-risky(
        bc-asm(onfailure)          |"emit code (assembly)", 2
      )
    else
      // Don't perform assembly, just verify and optimize it      
      if not(<get-config> NoVerify) then // (internal option only; see options.str)
        log-timed-risky(
          bc-verify(onfailure)     |"emit code (verification)", 2
        )
      end;
      
      if not(EmitFailed); Optimization-gt(|0) then
        log-timed-risky(
          bc-optimize              |"emit code (optimization)", 2
        )
      end
    end
  
  /**
   * Emit java code (multiply defined in emit modules).
   *
   * Emitting lists introduces a renaming scope; variables declared in it
   * cannot be used outside this scope.
   */
  emit-java(emit) =
    is-list;
    rename-locals-scope(emit-map(emit))

  /** Map over a series of Java constructs or instructions. */
  emit-map(emit) =
    map(emit);
    flatten-bytecode

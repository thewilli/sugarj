/**
 * dryad-compiler emit field access and declarations.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/backend/emit/fields

// TODO2: true constant fields, requires some partial evaluation... (see JLS 15.28)

/** Field declarations. */
strategies

  /** Emit field initialization. */
  emit-java-field-init(emit) =
    ?FieldDec(flags, type, <id>);
    map(trace(emit-java-field-init(emit|type, flags)))
    
  emit-java-field-init(emit|type, flags):
    VarDec(Id(name), e) ->
    |[ <emit> e;
       <emit-assign-conversion(emit)>;
       putstatic <CurrentClassName>.~name : <emit> type
    ]|
    where <elem> (Static, flags)
    
  emit-java-field-init(emit|type, flags):
    VarDec(Id(name), e) ->
    |[ load this;
       <emit> e;
       <emit-assign-conversion(emit)>;
       putfield <CurrentClassName>.~name : <emit> type
    ]|
    where <not(elem)> (Static, flags)

  /** Emit field declaration. */
  emit-java(emit) =
    ?FieldDec(mods, type, <id>);
    map(\
      <?VarDec(Id(name), _) + ?VarDec(Id(name))> ->
      Field(
        AccessFlags(mods), Name(name)
      , FieldDescriptor(<emit> type), Attributes([])
      )
    \)

  // Interface field constants
  emit-java(emit):
    ConstantDec(_, type, decs) -> <emit> FieldDec([Final, Public, Static], type, decs)

/** Field read access. */
strategies

  emit-java(emit) =
    emit-java-arraylength(emit)
  <+
    emit-java-field(emit)

  // Pseudo field: "array.length" (for ".class" field see module "types")
  emit-java-arraylength(emit):
    Field(array, Id("length")) -> |[ <emit> array; arraylength ]|
    where <type-attr> array => ArrayType(_)

  emit-java-field(emit):
    Field(_, _) -> |[ getstatic <emit-java-fieldref> ]|
    where lookup-field; is-static

  emit-java-field(emit):
    Field(object, _) -> |[ <emit> object; getfield <emit-java-fieldref> ]|
    where lookup-field; not(is-static)

/** Field write access. */
strategies

  emit-java(emit):
    Assign(field @ Field(o, _), e) -> [<emit> [o, e], convert, DUP_X1, PUTFIELD(field')]
    where convert := <emit-assign-conversion(emit)>;
          <lookup-field> field; not(is-static);
          field' := <emit-java-fieldref> field

  emit-java(emit):
    Assign(field @ Field(_, _), e) -> [<emit> e, convert, DUP, PUTSTATIC(field')]
    where convert := <emit-assign-conversion(emit)>;
          <lookup-field> field; is-static;
          field' := <emit-java-fieldref> field
  
  /** @internal */
  emit-modify-variable(emit|field) =
    where(
      <try(canonicalize-field)> field => Field(object, _);
      field' := <emit-java-fieldref>
    );
    
    if <lookup-field> field; is-static then
      !|[ getstatic ~field'; <emit>; putstatic ~field' ]|
    else
      bc-all(try(\DUP -> DUP_X1\)); // place duplicate before object
      
      !|[ <emit> object; dup; getfield ~field'; <emit>; putfield ~field' ]|
    end

  /** @internal */
  emit-java-fieldref:
    field @ Field(_, Id(name)) -> |[ ~class.~name : ~type ]|
    where class := <declaring-class-attr; source-type-to-bytecode-type>;
          type := <type-attr; source-type-to-bytecode-type> field

/**
 * Field access qualification.
 * @internal
 */
strategies

  /** Qualify field used as lhs of assignment or operator assignment. */
  emit-java(emit) =
    Assign(canonicalize-field, id);
    emit

  emit-java(emit) =
    canonicalize-field;
    emit
  
  /**
   * Add a qualifier to an unqualified field reference.
   * We use the 'qualified this' here (JLS 15.8.4), which also covers static access.
   */
  canonicalize-field: // e.g., myField -> Foo.this.myField
    Field(name){a*} -> Field(QThis(<declaring-class-attr>), name){a*}
  
  canonicalize-field:
  	SuperField(name){a*} -> Field(QThis(<declaring-class-attr>), name){a*}
  
  canonicalize-field:
  	QSuperField(super, name){a*} -> Field(super, name){a*}

/**
 * dryad-compiler emit instance/static initializers.
 *
 * Static initializers are emitted to ONE method named "<clinit>".
 * Instance initializers are inserted at the start of each constructor
 * (all named "<init>").
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/backend/emit/initializers

/** Emit initializers. */
strategies

  // TODO2: Static field initialization; requires evaluation 
  
  emit-java(emit):
    StaticInit(body) ->
    |[ static <clinit>(void) [
         ~body';
         return
       ]
    ]|
    where body' := <emit> body;
          bc-verify-initializer(emit)

  /** @type List(Method) -> List(Method) */
  join-java-static-inits(emit) =
    where(clinits := <emit-java-static-inits(emit)>);
    rest := <bc-collect-wrapped(not(is-class-init-method))>;
    <conc> (clinits, rest)

  /**
   * Given a list of methods, return all static initializers,
   * concatenated into a single method.
   * @internal
   */
  emit-java-static-inits(emit) =
    // Take the instructions of all initializers
    bc-collect(is-class-init-method; bc-get-method-body);
    mapconcat(split-last => (<id>, RETURN));

    if not([]) then
      <as-list> |[ static <clinit>(void) [ ~*<id>; return ] ]|
    end

  /**
   * Emits instance initializer instructions, for inclusion in
   * a <init> method.
   *
   * @type List(InstanceInit or FieldDec or a) -> List(Instruction)
   */
  emit-java-instance-inits(emit) =
    filter(?InstanceInit(<emit>) + emit-java-field-init(emit));
    concat;
    bc-verify-initializer(emit)

strategies

  bc-verify-initializer(emit) = // Must verify here; does not exist in bytecode
    bc-all(
      if XRETURN + RETURN + ATHROW then
        bc-get-reported-code;
        emit-error(emit|"Initializers may not return or throw exceptions")
      end
    )

  emit-java(emit) =
    ?ConstrDec(ConstrDecHead(mods, _, targs, params, throws), ConstrBody(parent, body));
    
     // Emit as a regular method
    !MethodDec(MethodDecHead(mods, targs, Void, Id("<init>"), params, throws), body);
    emit;
          
    // Add initialization code
    (  oncetd(Instructions(![<emit-constructor-init(emit|parent)> | <id>]))
    <+ emit-error(emit|"Unable to add constructor initialization code."))

  /** @internal */
  emit-constructor-init(emit|parent) =
    where(
      !parent => Some(invoke)
    <+
      invoke := SuperConstrInv(None, []) {Declaration(ConstructorName(<SuperClassType>, []))}
    );
    ![<emit> invoke, <InstanceInitCode>]

  emit-default-constructor(emit) =
    <emit> class-body-dec |[ public ~x:<CurrentClassName> () {} ]|

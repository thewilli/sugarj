/**
 * dryad-compiler emit invocations.
 *
 * @note init = the name of an initializer method, not an actual strategy.
 *       Can appear as <init> in concrete syntax.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/backend/emit/invokes

strategies

  // TODO2: emit qualified (super) constructor invoke (not yet supported by dryad-front)
  // TODO2: emit anonymous class construction

  /** Emit the various variants of invocations. */
  emit-java(emit) =
     emit-java-super-invoke(emit)
  <+ emit-java-interface-invoke(emit)
  <+ emit-java-instance-invoke(emit)
  <+ emit-java-static-invoke(emit)
  <+ emit-java-new-invoke(emit)
  <+ emit-java-inner-new-invoke(emit)
  <+ emit-java-ctor-invoke(emit)

  emit-java-super-invoke(emit) = fail
  
  emit-java-interface-invoke(emit):
    invoke @ Invoke(_, args) ->
    |[ <emit> object;
       ~args';
       invokeinterface <emit> class.~name(~*<emit> argtypes : <emit> returned)
    ]|
    where test(declaring-class-attr => InterfaceType(class, _));
          compile-time-declaration-attr => MethodName(_, Id(name), argtypes, returned);
          not(lookup-method; is-static);
          object := <get-invoked-object> invoke; // x.invoke() or just invoke()
          args' := <emit-converted-args(emit|args)> invoke

  emit-java-instance-invoke(emit):
    invoke @ Invoke(_, args) ->
    |[ <emit> object;
       ~args';
       invokevirtual <emit> class.~name(~*<emit> argtypes : <emit> returned)
    ]|
    where 
          test(declaring-class-attr => ClassType(class, _));
          compile-time-declaration-attr => MethodName(_, Id(name), argtypes, returned);
          not(lookup-method; is-static);
          object := <get-invoked-object> invoke; // x.invoke() or just invoke()
          args' := <emit-converted-args(emit|args)> invoke

  emit-java-static-invoke(emit):
    invoke @ Invoke(_, args) ->
    |[ ~object;
       ~args';
       invokestatic <emit> class.~name(~*<emit> argtypes : <emit> returned)
    ]|
    where compile-time-declaration-attr => MethodName(class, Id(name), argtypes, returned);
          lookup-method; is-static;
          if <get-invoked-object> invoke => target; not(This + QThis(id)) then
            object := [ <emit> target, POP ] // Emit instance, to ensure verification
          else
            object := []
          end;
          args' := <emit-converted-args(emit|args)> invoke

  /** Emit regular class instantiation. */
  emit-java-new-invoke(emit):
    new @ NewInstance(_, type, args, None) ->
    |[ new ~ObjectType(<emit> class);
       dup;
       ~args';
       invokespecial <emit> class.<init>(~*<emit> argtypes : void)
    ]|
    where not(<is-instance-inner-class> type);
          declaration-attr => ConstructorName(class, argtypes);
          args' := <emit-converted-args(emit|args)> new

  /** Emit inner instance class instantiation. */
  emit-java-inner-new-invoke(emit):
    new @ NewInstance(_, type, args, None) ->
    |[ new ~ObjectType(<emit> class);
       dup;
       ~args';
       ~outerarg;
       invokespecial <emit> class.<init>(~outertype', ~*<emit> argtypes : void)
    ]|
    where declaration-attr => ConstructorName(class, argtypes);
          !class => TypeName(outertype, _);
          outerarg  := <emit> QThis(outertype);
          outertype' := ObjectType(<emit> outertype);
          args'     := <emit-converted-args(emit|args)> new
  
  /** Emit qualified inner instance class instantiation. */
  emit-java-inner-new-invoke(emit):
    new @ QNewInstance(outer, _, _, _, args, None) ->
    |[ new ~ObjectType(<emit> class);
       dup;
       ~args';
       <emit> outer;
       invokespecial <emit> class.<init>(~outertype, ~*<emit> argtypes : void)
    ]|
    where declaration-attr => ConstructorName(class, argtypes);
          args'     := <emit-converted-args(emit|args)> new;
          outertype := <emit> <type-attr> outer

  // TODO2: Add implicit outertype argument for super innerclass c'tor invokes (see emit-java-inner-new-invoke)
  emit-java-ctor-invoke(emit): 
    super @ SuperConstrInv(None, args) ->
    |[ load this;
       ~args';
       invokespecial <emit> class.<init>(~*<emit> argtypes : void)
    ]|
    where declaration-attr => ConstructorName(class, argtypes);
          args'     := <emit-converted-args(emit|args)> super
  
  // TODO2: Add implicit outertype argument for super innerclass c'tor invokes (see emit-java-inner-new-invoke)
  emit-java-ctor-invoke(emit): 
    this @ AltConstrInv(None, args) ->
    |[ load this;
       ~args';
       invokespecial <emit> class.<init>(~*<emit> argtypes : void)
    ]|
    where declaration-attr => ConstructorName(class, argtypes);
          args'     := <emit-converted-args(emit|args)> this

  /** @internal */
  get-invoked-object =
    ( ?Invoke(Method(<id>, _, _),          _)
    + ?Invoke(Method(MethodName(<id>, _)), _)
    + ?Invoke(QSuperMethod(<id>, _, _),   _); !QThis(<id>)
    + ?Invoke(GenericMethod(<id>, _, _),   _)
    );
    not(?TypeName(_, _) + ?TypeName(_))
  <+
    !QThis(<declaring-class-attr>)

/**
 * dryad-compiler bytecode jump unassembly to rich bytecode.
 *
 * Translates regular Java bytecode jumps to labeled jumps.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/backend/unasm/jump-labels

strategies

  // TODO: unasm tableswitch, lookupswitch
  // TODO2: use bc-number-wrapped abstraction
  // TODO2: unasm JSR

  /** Translates regular Java bytecode jumps to labeled jumps. */
  bc-unasm-jumps =
  {| LabelAt:
    bc-unasm-jumps-replace(|0);
    bc-unasm-jumps-insert(|0)
  |}

/** @internal */
strategies
   
  /** Change all offsets in jump instructions to labels. */
  bc-unasm-jumps-replace(|index) =
    [ if bc-get-jump-target => Count(count) then
        where(
          target := <add> (index, count);
          if not(LabelAt => label) then // Register jump to this target
            label := <new-label>;
            rules(LabelAt: target -> label)
          end
        );
        one(!label) // Replace count with label
      end
    | bc-unasm-jumps-replace(|<inc> index)
    ]
  <+
    []

  /** Insert labels for jump instructions. */
  bc-unasm-jumps-insert(|index) =
    if <LabelAt> index => label then // Insert label here
      rules(LabelAt :- index);
      ![Label(label) | <bc-unasm-jumps-insert(|index)>]
    else
      [id            |  bc-unasm-jumps-insert(|<inc> index)]
    <+
      []
    end

/**
 * dryad-compiler front-end error reporting.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/frontend/errors

imports
  org/sugarj/dryad/compiler/dryadcompiler/backend/emit
  org/sugarj/dryad/compiler/dryadcompiler/util/errors

strategies

  dryad-compiler-front-errors =
    dryad-compiler-front-errors(dryad-compiler-error)

  /**
   * Report all errors in a type-annotated fragment of Java/bytecode.
   *
   * @param onfailure  Strategy that gets an DryadError or DryadWarning term for
   *                   each error or warning, may fail the entire strategy.
   *                   Default: dryad-compiler-error
   */
  dryad-compiler-front-errors(onfailure) = // = dryad-errors + mixing + tracing
    where( 
      dryad-compiler-front-collect-errors;
      
      list-loop(onfailure <+ try(?failed));
      not(!failed)
    )
  
  dryad-compiler-front-collect-errors =
  {| FrontErrors:
    rec rec(
      traverse-trace-tags(rec)
    <+
      where(try(dryad-fetch-error-to-rule));
      all(rec)
    );
    
    bagof-FrontErrors
  |}

/** @internal */
strategies

  dryad-fetch-error-to-rule =
    (  dryad-fetch-error-mixed
    <+
      // Errors in expressions are already handled here;
      // other errors may be detected by Dryad's fetch error
      not(is-Expr); dryad-fetch-error
    );
    
    try( // add trace
      \DryadError(msg, term)   -> DryadError(msg, term {Trace(<LastTrace>)})\
    + \DryadWarning(msg, term) -> DryadWarning(msg, term {Trace(<LastTrace>)})\
    );
    
    rules(FrontErrors :+= <id>)

  /** Innermost type error in expression. */       
  dryad-fetch-error-mixed =
    is-Expr => e;
    where(
      <not(type-attr)> e;
      <sub-expressions-mixed; map(type-attr)> e
    );
    if ?ExprName(_) then
      !DryadError("Cannot find symbol.", e)
    else
      !DryadError("Unable to assign a type to this expression!", e)
    end

  /** In-code error message. */       
  dryad-fetch-error-mixed =
    ?DryadError(_, _) + ?DryadWarning(_, _)
  
  /** Innermost type error in embedded bytecode. */
  dryad-fetch-error-mixed =
    (?BytecodeStm(b) + ?BytecodeExpr(b)) => e;
    where(
      not(type-attr);
      not(<dryad-fetch-error-annos> b);
      sub-expressions-mixed; map(type-attr)
    );
    !DryadError("Invalid type for bytecode fragment.", e)

  /** Report any type errors that are in annotations on the current term. */
  dryad-fetch-error-annos =
    get-annos;
    filter(?DryadError(_, _) + ?DryadWarning(_, _));
    not([]);
    list-loop(dryad-fetch-error-to-rule)

strategies

  /**
   * Returns the sub-expressions of an expression.
   *
   * @type Expr -> List(Expr)
   */
  sub-expressions-mixed =
    is-embedded-bytecode;
    one(bc-collect(is-embedded-java) => exprs);
    !exprs
  <+
    sub-expressions

/**
 * dryad-compiler java class expansion.
 *
 * Provides strategies to parse or transform a given Java
 * class, statement, expression to a compilation unit ('as-compilation-unit'),
 * and back again ('undo-as-compilation-unit').
 *
 * @internal
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/frontend/expand

imports
  libjava-front
  org/sugarj/dryad/compiler/dryadcompiler/frontend/-
  org/sugarj/dryad/compiler/dryadcompiler/util/-

/**
 * Rewrite a Java construct to a compilation unit.
 * @internal
 */
strategies

  as-compilation-unit =
    ?CompilationUnit(_, _, _)
  <+
    is-ClassFile
  <+
    trace-terms-to-annos;
    try(add-bytecode-embedding-tag);
    as-compilation-unit'

  as-compilation-unit':
    <is-BlockStm + BytecodeStm(id)> ->
    compilation-unit |[
      public class ~x:<newname> "$Stm" {
        public static void main(java.lang.String[] args) { ~<id> }
      }
    ]|

  as-compilation-unit': // treat invoke as a statement (in case it's void)
    Invoke(_, _) ->
    compilation-unit |[
      public class ~x:<newname> "$Invoke" {
        public static void main(java.lang.String[] args) { ~ExprStm(<id>) }
      }
    ]|

  as-compilation-unit':
    <is-Expr; not(?Invoke(_, _)) + BytecodeExpr(id) + ?DryadError(_, _) + ?DryadWarning(_, _)> ->
    compilation-unit |[
      public class ~x:<newname> "$Expr" {
        public static void main(java.lang.String[] args) { System.out.println(~<id>); }
      }
    ]|
  
  as-compilation-unit':
    <is-MethodDec + is-Method> ->
    compilation-unit |[
      public class ~x:<newname> "$Method" { ~<id> }
    ]|

  as-compilation-unit':
    <list-loop(is-BlockStm + BytecodeStm(id))> ->
    <as-compilation-unit'> Block(<id>)
  
/**
 * Undo rewriting of a Java construct to a compilation unit.
 * @internal
 */
strategies

  // Undo from Java source
  
  undo-as-compilation-unit:
    Trace(_, new) -> <try(?[<id>]); undo-as-compilation-unit> new
    
  undo-as-compilation-unit:
    compilation-unit |[
      public class ~x:<string-starts-with(|"$Stm")> { public static ~_ ~_(~_) { ~stm } }
    ]| ->
    stm
  
  undo-as-compilation-unit:
    compilation-unit |[
      public class ~x:<string-starts-with(|"$Invoke")> {
        public static ~_ ~_(~_) { ~ExprStm(e) } 
      }
    ]| ->
    e
  
  undo-as-compilation-unit:
    compilation-unit |[
      public class ~x:<string-starts-with(|"$Expr")> {
        public static ~_ ~_(~_) { ~ExprStm(Invoke(_, [e])) } 
      }
    ]| ->
    e

  undo-as-compilation-unit:
    compilation-unit |[ public class ~x:<string-starts-with(|"$Method")> { ~method } ]|
    -> method

  // Undo from bytecode

  undo-as-compilation-unit:
    ClassFile(_, _, _, ThisClass(<string-starts-with(|"$Stm")>), _, _, _,
              Methods([_, method]), _)
    -> <bc-get-method-body> method

  undo-as-compilation-unit:
    ClassFile(_, _, _, ThisClass(<string-starts-with(|"$Invoke")>), _, _, _,
              Methods([_, method]), _)
    -> invoke
    where invoke := <bc-get-method-body; remove-ending-pop-and-return> method

  undo-as-compilation-unit:
    ClassFile(_, _, _, ThisClass(<string-starts-with(|"$Expr")>), _, _, _, 
              Methods([_, method]), _)
    -> expr
    where expr := <bc-get-method-body; remove-outer-println> method

  undo-as-compilation-unit:
    ClassFile(_, _, _, ThisClass(<string-starts-with(|"$Method")>), _, _, _,
              Methods(<last => method>), _) 
    -> method

  /** Remove trailing [pop, return], [pop2, return] or [return]. */
  remove-ending-pop-and-return =
    try(\[Trace(_, body), RETURN] -> <conc> (body, [RETURN])\);
    rec rec(
      ?[POP, _]; ![] <+ ?[POP, _]; ![] <+ ?[_]; ![]
    <+
      [id | rec]
    )
  
  remove-outer-println =
    try(\[Trace(_, body), RETURN] -> <conc> (body, [RETURN])\);
    Tl; // remove getfield for println
    rec rec(?[_, _]; ![] <+ [id | rec]) // remove invoke and return

/**
 * Rewrite a Java construct to a string-to-string method.
 * @internal
 */
strategies
  
  as-string-method =
    trace-terms-to-annos;
    try(add-bytecode-embedding-tag);
    as-string-method'
  +>
    ?|[ public static java.lang.String run(java.lang.String x) {
          ~*_
        }
    ]|

  as-string-method':
    <is-Expr + BytecodeExpr(id) + ?DryadError(_, _) + ?DryadWarning(_, _)> ->
    |[ public static java.lang.String run(java.lang.String arg) {
          return "\"" + ~<id> + "\"";
       }
    ]|

  as-string-method':
    <list-loop(is-BlockStm + BytecodeStm(id))> ->
    <as-string-method'> Block(<id>)
  
  as-string-method':
    <is-BlockStm + BytecodeStm(id)> ->
    |[ public static java.lang.String run(java.lang.String arg) {
         ~body
       }
    ]|
    where alltd(as-string-return) => body

  as-string-return:
    |[ return e; ]| -> |[ return "\"" + e + "\""; ]|

  as-string-return:
    |[ return; ]| -> |[ return "\"\""; ]|

  as-string-return:
    RETURN -> bc |[ `return "\"\""; ]|

  as-string-return:
    XRETURN -> bc |[ store ~x; `return "\"" + x + "\""; ]|
    where x := <newname> "temp"

/** @internal */
strategies

  /**
   * Java disambiguation, uses to-compilationunit to get
   * a CompilationUnit from a parsetree.
   * @internal
   */
  disambiguate-as-compilation-unit =
    not(amb(id)); try(as-compilation-unit) // always succeed for last element
  <+
    ?amb(<getfirst(CompilationUnit(id, id, id))>)
  <+
    ?amb(<getfirst(is-MethodDec; as-compilation-unit)>)
  <+
    ?amb(<getfirst(is-BlockStm; as-compilation-unit)>)
  <+
    ?amb(<getfirst(as-compilation-unit)>)
  <+
    ?amb([<id> | _]) // can't make a compilation-unit
  
  /**
   * Add a BytecodeExpr or BytecodeStm tag to a list of instructions,
   * depending on its output type.
   *
   * Example: <add-bytecode-embedding-tag> [LDC(Int("1"))] => BytecodeExpr(_)
   *
   * @internal
   */
  add-bytecode-embedding-tag =
    is-rich-bc-instructions;
    
    switch bc-dryad-type-checker; type-attr
      case [id]:
        !BytecodeExpr(<id>)
      otherwise:
        !BytecodeStm(<id>)
    end

/**
 * dryad-compiler front-end extension for handling bytecode
 * and position annotations.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/frontend/front

imports
  org/sugarj/dryad/compiler/dryadcompiler/backend/asm
  org/sugarj/dryad/compiler/dryadcompiler/backend/unasm
  org/sugarj/dryad/compiler/dryadcompiler/util/-
  org/sugarj/dryad/compiler/dryadcompiler/util/trace/-

strategies

  dryad-compiler-front =
    dryad-compiler-front(dryad-compiler-error)

  /**
   * Typechecking and disambiguation of Java code mixed with bytecode.
   *
   * (Adapted from the standard dryad-front, this does not do parsing,
   * always annotes types, and supports position/trace-annotated ASTs.)
   *
   * @param onfailure  Strategy that gets an DryadError or DryadWarning term for
   *                   each error or warning, may fail the entire strategy.
   *                   Default: dryad-compiler-error
   *
   * @see read-class-file-disasm        Read a classfile for use by the front-end.
   * @see dryad-compiler-front-errors   Report type errors found in this stage.
   */
  dryad-compiler-front(onfailure) =
    dryad-compiler-input-wrap(
      as-list(log-timed-risky(
        log-timed-risky( // support mixed classes / tracing
          prepare-for-dryad-front(onfailure)     |"front-end (preparation)", 2
        );
        
        // TODO: dryad-reclassify should be extended for disambiguation of local variables in different quoted blocks
        //       (e.g., [ `Object o = 1; `return o.toString(); ])
        
        log-timed-risky(
          map(define-compilation-unit);
          dryad-reclassify                       |"front-end (load classes)", 2
        );
        
        log-timed-risky( // use extended dryad-front type-check
          map(dryad-type-checker-mixed; get-ast) |"front-end (type-checking)", 2
        )
      | "front-end", 1
      ))
    )

strategies
  
  /**
   * Preprocess source files for compatibility with dryad-front:
   * - ensure observable classes are loaded;
   * - cleanup position annotations;
   * - unassembly any classfile signatures to Java signatures.
   */
  prepare-for-dryad-front(onfailure) =
    // Note: built-in parser also invokes dryad-clean-pos-info
  
    ensure-import-observable-classes;
    
    as-list(map( // unassemble imported classfiles
      if(is-ClassFile, bc-unasm(onfailure))
    ));
    
    // Clean up the parse tree a bit so dryad can operate on it
    // For Dryad this suffices: bottomup(try(bc-unasm-signature <+ trace-terms-to-annos))
    // but to eliminate "legacy" instructions for the type checker, a full unassembly is performed
    
    topdown(try(trace-terms-to-annos));
    bc-unasm

  ensure-import-observable-classes =
    HasImportedObservableClasses
  <+
    where(dryad-compiler-internal-jvm); // Load own JVM with customized classpath instead of Dryad's
    import-observable-classes;
    rules(HasImportedObservableClasses: _)

  /**
   * Remove position info annotations from a parse tree at places
   * where dryad cannot support them.
   */
  dryad-clean-pos-info =
    topdown(is-dryad-pos-info-allowed <+ rm-position-annos)
  
  /** @internal */
  is-dryad-pos-info-allowed =
    not( // Blacklist certain elements that dryad likes anno-free
      is-TypeName + is-TypeArgs + is-TypeVar + is-Type + Void
    + is-InterfaceType + is-ClassType + is-ClassOrInterfaceType
    + is-Id + is-string + is-PackageName + is-Literal
    + Some(id) + None + is-Super + is-ExtendsInterfaces + is-AmbName
    + ?QNewInstance(_, _, _, _, _, _) + ?NewInstance(_, _, _, _)
    
    // Optional
    + Public + Static + Private + Protected
    )

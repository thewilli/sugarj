/**
 * dryad-compiler partial java class parser.
 *
 * @see dryad-compiler-parse
 * @see dryad-compiler-parse-partial
 * @see dryad-compiler-input-wrap(s|table)
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/frontend/parse

imports
  libstratego-sglr
  org/sugarj/dryad/compiler/dryadcompiler/frontend/expand

/**
 * Parse an XTC input, a string, or a stream.
 * Adds position info.
 */
strategies

  // TODO2: Partial parsing should be done at the parsetree level.
  //        This would allow recognition of sorts for constructors defined in
  //        an external DSL, and should help performance for posinfo etc.

  dryad-compiler-parse =
    dryad-compiler-parse(|<parse-table-java-bytecode>)

  dryad-compiler-parse(|table) =
    dryad-compiler-parse(|table, "CompilationUnit")
  
  /**
   * Parse an XTC input, a string, or a stream, 
   * adding position and comment information to the AST.
   *
   * @param startsymbol  The start symbol of the table, or None().
   */
  dryad-compiler-parse(|table, startsymbol) =
    // TODO2: What about stdin class files?
    where(FILE(get-extension => "class"));
    read-class-file-disasm
  <+
    dryad-compiler-parse-pt(|table, startsymbol);
    asfix-anno-comments(|["Comment"]);
    annotate-start-line-column;
    
    implode-asfix;
    dryad-clean-pos-info
   
  /** @internal */
  dryad-compiler-parse-pt(|table, startsymbol) =
    (FILE(id) + stdin());
    parse-xtc-file-pt-report-errors(|table, startsymbol)
  <+
    is-string;
    parse-string-pt(strsglr-report-parse-error |table, startsymbol)
  <+
    ?(_, _);
    parse-stream-pt(strsglr-report-parse-error |table, startsymbol)

  is-parseable-input =
    FILE(id) + stdin + is-string + (id, id)

  /**
   * Parse a Java class, statement, etc., and wrap it into a CompilationUnit or ClassFile.
   *
   * @see dryad-compiler-input-wrap(s|table)
   */
  dryad-compiler-parse-partial(|table) =
    dryad-compiler-parse(|table, None); // Parse w/o start symbol
    disambiguate-as-compilation-unit;
    
    if not(CompilationUnit(id, id, id) + is-ClassFile) then
      err(|"Input must be a public class, a method, a statement, or an expression.");
      fail
    end

  /** Retrieve the Java/bytecode parse table (cached). */
  parse-table-java-bytecode =
    CachedBytecodeJavaTable
  <+
    table := <open-parse-table> <import-term(org/sugarj/languages/Java-Bytecode.tbl)>;
    rules(CachedBytecodeJavaTable := table)

/**
 * Parsing wrappers.
 *
 * @see dryad-compiler-input-wrap(s|table)
 */
strategies

  /** @internal */
  dryad-compiler-parse-wrap(s|table) =
    as-list(dryad-compiler-filenames-wrap(
      log-timed(map(dryad-compiler-parse(|table)) |"parsing", 1)
    ));
    
    s
  
  /** @internal */
  dryad-compiler-parse-partial-wrap(s|table) =
    as-list(dryad-compiler-filenames-wrap(
      log-timed(map(dryad-compiler-parse-partial(|table)) |"parsing", 1)
    ));
    
    s;
    
    as-list(map(try(undo-as-compilation-unit)))

/** Position-annotated parse tree support. */
strategies

  /**
   * Add filename information to dryad compiler inputs,
   * given a list of filenames or XTC inputs.
   */
  dryad-compiler-filenames-wrap(open) =
    ?inputs;
    open;
    
    try(
      where(filenames := <map(?FILE(<id>))> inputs);
    
      !(<id>, filenames);
      zip(!<Fst> {Attributes([SourceFile(<Snd>)])})
    )
  
  strip-position-annos =
    topdown(rm-position-annos)
  
  rm-position-annos:
    term {a*} -> term {b*}
    where b* := <filter(not(?StartLineColumn(_, _)))> a*

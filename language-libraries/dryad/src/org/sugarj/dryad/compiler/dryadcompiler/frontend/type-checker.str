/**
 * dryad-compiler type-checker extension for handling bytecode.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/frontend/type-checker

imports org/sugarj/dryad/compiler/dryadcompiler/backend/asm

strategies
  
  /**
   * dryad-type-checker extended to support mixed bytecode.
   *
   * @see scope-TypeOf(s)   Use this to scope any unscoped locals in the input.
   */
  dryad-type-checker-mixed =
    dryad-type-checker(dryad-type-checker-ext);
    rules(LastTypeChecked := <id>); // used for Java-in-bytecode; see bc-dryad-type-checker
    
    try(unscoped-variables-to-rules)

  /**
   * Define 'TypeOf' rule for sharing Java variables with outer bytecode scope.
   * (Locals within Java blocks are still left inaccessible.)
   *
   * @internal
   */
  unscoped-variables-to-rules =
    bc-all(try({
      ?LocalVarDecStm(LocalVarDec(_, type, decs));
      where(
        !decs;
        map-vardec-ids( // Define TypeOf in outer scope
          set-TypeOf(|Id(<id>), type)
        )
      )
    <+
      ?STORE(x) {Type(type)};
      set-TypeOf(|Id(x), <bytecode-type-to-source-type> type)
    <+
      // Recurse into inner blocks
      (is-embedded-java + is-embedded-bytecode);
      one(unscoped-variables-to-rules)
    }))

/**
 * Bytecode fragment typing.
 *
 * @internal
 */
strategies

  dryad-type-checker-ext(rec) =
    (?BytecodeExpr(_) + ?BytecodeStm(_));
    
    // Type check inner instruction list
    one(bc-dryad-type-checker);
    try(bc-type-to-anno);
    
    unscoped-variables-to-rules
    
  bc-type-to-anno:
    BytecodeExpr(b) -> BytecodeExpr(b) {Type(type)}
    where <type-attr> b => [<id>]; // must have single value on stack
          type := <bytecode-type-to-source-type>

  bc-type-to-anno:
    BytecodeStm(b) -> BytecodeStm(b) {Type(Void)}
    where <type-attr> b => <[] + Unreachable> // must have *no* value on stack
  
  /** Annotate types and errors on a list of bytecode instructions. */
  bc-dryad-type-checker =
    bc-asm-errors-to-annos-wrap(
      bc-type-check(
        // Add type-anno to instruction if possible
        Snd; try(bc-type-check-add-anno)
      ,
        ?stack
      );
      
      !<id> {Type(stack)}
    )

  /**
   * Place all assembly errors and warnings in an annotation, by
   * consuming the assembly dynamic rules.
   *
   * @internal
   */
  bc-asm-errors-to-annos-wrap(s) =
    where(new-iset => set); // store all errors in this set
    
    bc-asm-scope({ x: ?x; <iset-add(|x)> set }, s);
    
    // Add all errors as annotations
    where(errors := <iset-elements> set); 
    !<id> {^<conc> (errors, <get-annos>)}

  /**
   * Add typing proper annotations to bytecode instructions,
   * after they have been inspected by the type-checker. 
   *
   * @internal
   */
  bc-type-check-add-anno =
    JavaExpr(LastTypeChecked) + JavaStm(LastTypeChecked)
  <+
    \STORE(x) -> STORE(x) {Type(<bc-local-type> x)}\
  <+
    \LOAD(x) -> LOAD(x) {Type(<bc-local-type> x)}\

/** Java fragment (in bytecode) typing */
strategies

  /**
   * Typecheck a bytecode fragment that is not embedded in Java.
   * (Only required to typecheck inner Java code, if it has any.)
   */
  dryad-type-checker-ext(rec) =
    is-rich-bc-instructions;
    bc-one(JavaStm(id) + JavaExpr(id)); // typing required for inner Java
    bc-dryad-type-checker;
    rm-annotations // remove the annotation, since we normally don't type this...

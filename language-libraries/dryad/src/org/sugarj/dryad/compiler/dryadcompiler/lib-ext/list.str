/**
 * Stratego list strategies.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/lib-ext/list

imports libstratego-lib

strategies
  
  /**
   * Completely flattens a list and its sublists to a single list,
   * applying strategy s to all (non-list) elements.
   */
  flatten-list(s) = // flatten-list(id) == flatten-list
    foldr(![], (is-list, id) < conc + MkCons, is-list < flatten-list(s) + s) <+ s

  /**
   * Succeeds if the given input contains all given terms in order.
   *
   * Example: <match-fragments(|[2,4,5])> [1,2,3,[4,5]] => [1,2,3,[4,5]]
   */
  match-fragments(|fragments) =
    where(
      !(<id>, fragments);
      thread-alltd({ (?f, ?[f | <id>]) });
      ?(_, [])
    )

  /**
   * Make the current term into a singleton list, unless it's already a list.
   */
  as-list = 
    is-list <+ ![<id>]
    
  /**
   * Make the current term into a singleton list, apply s, and attempt to unlist.
   *
   * Example: as-list(map(parse)) // parse single inputs or lists of inputs
   */
  as-list(s) =
    is-list < s
            + ![<id>]; s; try(?[<id>])

/**
 * dryad-compiler command-line options definition.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/sugarj/dryad/compiler/dryadcompiler/util/options

signature constructors
  Partial      : OptionKey
  Optimization : OptionKey
  Stage        : OptionKey
  NoDebugInfo  : OptionKey
  PP           : OptionKey
  NoVerify     : OptionKey // Internal use only: use Loose and Verbose instead
  
  // OptionKeys not defined here:
  // Loose : OptionKey  is defined in org/sugarj/dryad/compiler/dryad.
  // "--verbose"        is defined by default.

strategies

  /** Defines all dryad-compiler command-line options. */
  dryad-compiler-options =
    partial-option
  <+
    dryad-back-options

  /** Defines all dryad-compiler command-line options (excl. parsing options). */
  dryad-back-options =
    stage-option
  <+
    pp-option
  <+
    optimization-option
  <+
    debug-info-option
  <+
    Option( // defined in dryad as loose-option; pass-loose
      "--loose"
    , <set-config> (Loose, <id>)
    , !"--loose          Ignore compilation errors (shows intermediate code for debugging)"
    )
  <+
    observable-classes-option
  <+
    Option(
      "--debug"
    , <set-config> (Loose, "--loose");
      <set-config> (NoDebugInfo, "-g:none");
      <set-config> (Partial, "--partial");
      
      (<get-config> Stage        <+ <set-config> (Stage, 2));
      (<get-config> Optimization <+ <set-config> (Optimization, 0));
      (<get-config> "--verbose"  <+ <set-verbosity> 2)
    , !"--debug          Display the AST before assembly for visual inspection. Implies --stage 2 --g:none -O 0 --loose --partial --verbose 2"
    )

  // TODO: -d option for output directory

  partial-option =
    Option(
      "--partial"
    , <set-config> (Partial, <id>)
    , !"--partial        Use partial parsing to compile classes, methods, statements, or expressions (in that order)"
    )
  
  // TODO: should --pp be off by default for stages 0 and 1?
  
  pp-option =
    SwitchOption(|
      "pp"
    , "on"
    , "Pretty print output"
    )

  optimization-option =
    // HACK: override "observable" (also -O) option for ints
    where(if(?["-O", <id> | _], string-to-int));
    ArgOption(
      "--optimize" + "-O"
    , <set-config> (Optimization, <string-to-int; (1 + 0)>)
    , !"-O | --optimize <0|1>         Set optimization level  [1]"
    )
  
  stage-option =
    ArgOption(
      "--stage"
    , <set-config> (Stage, <string-to-int>)
    , !"--stage <n>      Only compile up to stage n (1=front-end; 2=emit; 3=asm; 4=write to class)  [4]"
    )
  
  debug-info-option =
    Option(
      "-g"
    , <rm-config> NoDebugInfo
    , !"-g               Output debugging information (default)"
    )
  <+
    Option(
      "-g:none"
    , <set-config> (NoDebugInfo, <id>)
    , !"-g:none          Do not output debugging information"
    )
  
  /** Succeeds if the configured '--stage' number is less than the given value. */
  Stage-lt(|value) =
    where(<lt> (<get-config> Stage, value))

  /** Succeeds if the configured '--stage' number is greater than the given value. */
  Stage-gt(|value) =
    where(<gt> (<get-config <+ !4> Stage, value))

  /** Succeeds if the configured '--optimize' number is greater than the given value. */
  Optimization-gt(|value) =
    where(<gt> (<get-config; not(Optimization) <+ !1> Optimization, value))
